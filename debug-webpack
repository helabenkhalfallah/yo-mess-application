{
  "name": "app-webpack-config",
  "version": "xxxx",
  "description": "",
  "main": "src/webpack.config.js",
  "repository": {
    "type": "git",
  },
  "scripts": {
    "start": "echo \"--START--\" ",
    "build": "echo 'Build OK'",
    "test": "echo \"Warn: no test specified\" "
  },
  "files": [
    "src/webpack.config.js",
    "src/webpack.dev.js",
    "src/webpack.prod.js",
    "optional-module.js"
  ],
  "dependencies": {
    "@babel/core": "=7.12.10",
    "@babel/polyfill": "=7.12.1",
    "@babel/preset-env": "=7.12.11",
    "@babel/preset-react": "=7.12.10",
    "babel-core": "=7.0.0-bridge.0",
    "babel-eslint": "=10.1.0",
    "babel-jest": "=26.6.3",
    "babel-loader": "=8.2.2",
    "css-loader": "=5.0.1",
    "chai": "=4.2.0",
    "enzyme": "=3.11.0",
    "enzyme-adapter-react-16": "=1.15.5",
    "@wojtekmaj/enzyme-adapter-react-17": "=0.4.1",
    "eslint": "=7.17.0",
    "eslint-config-airbnb": "=18.2.1",
    "eslint-plugin-import": "=2.22.1",
    "eslint-plugin-jsx-a11y": "=6.4.1",
    "eslint-plugin-react": "=7.22.0",
    "file-loader": "=6.2.0",
    "html-loader": "=1.3.2",
    "html-webpack-plugin": "=4.5.1",
    "jest": "=26.6.3",
    "jest-sonar-reporter": "=2.0.0",
    "jest-stare": "=2.2.0",
    "node-sass": "=4.9.3",
    "postcss-loader": "=4.1.0",
    "resolve-url-loader": "=3.1.2",
    "sass-loader": "=10.1.0",
    "style-loader": "=2.0.0",
    "less": "=4.0.0",
    "less-loader": "=7.2.1",
    "stylelint": "=13.8.0",
    "stylelint-webpack-plugin": "=2.1.1",
    "terser-webpack-plugin": "=5.0.3",
    "url-loader": "=4.1.1",
    "webpack": "=5.11.1",
    "webpack-bundle-analyzer": "=4.3.0",
    "webpack-cli": "=4.3.1",
    "webpack-dev-server": "=3.11.1",
    "webpack-merge": "=5.7.3"
  }
}





const { merge } = require('webpack-merge');
const Dev = require('./webpack.dev');
const Prod = require('./webpack.prod');

const baseConfig = {
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: [
            'babel-loader'
        ],
      },
      {
        test: /\.scss$/,
        loaders: [
          'style-loader',
          'css-loader',
          'resolve-url-loader',
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true
            }
          },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.css$/,
        use: [
          { loader: 'style-loader' },
          { loader: 'css-loader' },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.less$/,
        use: [
          { loader: 'style-loader' },
          { loader: 'css-loader' },
          {
            loader: 'less-loader',
            options: {
              // customize ant design theme : https://ant.design/docs/react/use-with-create-react-app#Customize-Theme
              javascriptEnabled: true,
            },
          },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.(jpe?g|png|gif|svg)$/,
        loader: 'url-loader',
        options: {
          limit: 8192,
          name: 'assets/img/[name].[ext]',
        },
      },
      {
        test: /\.(ttf|eot|otf|woff2?)$/,
        loader: 'url-loader',
        options: {
          limit: 8192,
          name: 'assets/fonts/[name].[ext]',
        },
      },
    ],
  },
  resolve: {
    extensions: ['*', '.js', '.jsx'],
  }
};

const devConfig = merge(baseConfig, Dev);
const prodConfig = merge(baseConfig, Prod);

module.exports.devConfig = devConfig;
module.exports.prodConfig = prodConfig;





const path = require('path');

module.exports = {
  mode: 'development',
  entry: path.resolve(__dirname, '../src/main/webapp/index.js'),
  output: {
    path: path.resolve(__dirname, '../src/main/webapp/dist'),
    publicPath: '/',
    filename: 'app-bundle.js',
  },
  devServer: {
    contentBase: '../dist',
    historyApiFallback: true,
    hot: true,
    port: 9000,
  }
};


const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');

module.exports = {
  mode: 'production',
  entry: path.resolve(__dirname, '../src/main/webapp/index.js'),
  output: {
    path: path.resolve(__dirname, '../src/main/webapp/dist'),
    publicPath: '/',
    filename: 'app-bundle.js',
  },
  optimization: {
    minimize: true,
    minimizer: [
      new TerserPlugin({
        parallel: true,
        terserOptions: {
          mangle: true,
          output: {
            comments: false,
          },
        },
      })
    ]
  }
};
